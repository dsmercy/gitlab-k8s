stages:          # List of stages for jobs, and their order of execution
  - build
  - deploy

variables:
  # Set the name of your Docker image
  KUBE_CONTEXT: learning2770602/local-kubernetes-connection:primary-agent
  APPLICATION_NAME: react-app
  CONTAINER_REGISTRY_IMAGE: registry.gitlab.com/learning2770602/$APPLICATION_NAME:1.0.$CI_PIPELINE_IID
  SECRETS_FILE: react-app-secrets
  SERVICE_NAME: react-app-service
  REACT_APP_DOTNET_API_URL: http://localhost:30081/WeatherForecast


build-job:       # This job runs in the build stage, which runs first.
  image: docker:latest
  stage: build
  services:
    - docker:20.10.7-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CONTAINER_REGISTRY_IMAGE .
    - docker push $CONTAINER_REGISTRY_IMAGE
    - echo "image built"



deploy-job:      # This job runs in the deploy stage.
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: ['']
  services:
    - name: docker:20.10.7-dind

  script:
  - echo "add k8s context"
  - kubectl config use-context $KUBE_CONTEXT

  - echo "populate $SECRETS_FILE secrets in k8s"
  - kubectl create secret generic $SECRETS_FILE --from-literal=REACT_APP_DOTNET_API_URL="$REACT_APP_DOTNET_API_URL" --dry-run=client -o yaml | kubectl apply -f -

  - echo "deployment manifests to k8s"
  - sed -i "s#\$CONTAINER_REGISTRY_IMAGE#$CONTAINER_REGISTRY_IMAGE#g; s#\$APPLICATION_NAME#$APPLICATION_NAME#g; s#\$SECRETS_FILE#$SECRETS_FILE#g" manifests/deployment.yaml
  - sed -i "s#\$APPLICATION_NAME#$APPLICATION_NAME#g; s#\$SERVICE_NAME#$SERVICE_NAME#g" manifests/service.yaml
  - ls $CI_PROJECT_DIR/manifests
  - kubectl apply -f $CI_PROJECT_DIR/manifests/.

